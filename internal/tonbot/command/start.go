package command

import (
	"context"
	"database/sql"
	"errors"
	"strings"
	"time"
	"tonclient/internal/config"
	appModel "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/tonbot/buttons"
	"tonclient/internal/util"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var log = config.InitLogger()

type StartCommand struct {
	bt *bot.Bot
	us *services.UserService
	ts *services.TelegramService
}

func NewStartCommand(b *bot.Bot, us *services.UserService, ts *services.TelegramService) *StartCommand {
	return &StartCommand{
		bt: b,
		us: us,
		ts: ts,
	}
}

func (c *StartCommand) Execute(ctx context.Context, msg *models.Message) {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	chatId := msg.Chat.ID

	btn1 := util.CreateDefaultButton(buttons.RoleButtonUserId, buttons.RoleButtonUserText)
	btn2 := util.CreateDefaultButton(buttons.RoleButtonOwnerTokensId, buttons.RoleButtonOwnerTokensText)

	if _, err := util.SendTextMessageMarkup(
		c.bt,
		uint64(chatId),
		generateResponse(),
		util.CreateInlineMarup(2, btn1, btn2),
	); err != nil {
		log.Error(err)
		return
	}

	_, err := c.us.GetByTelegramChatId(uint64(chatId))
	if err != nil {
		if err.Error() == "user not found" {
			text := strings.Split(msg.Text, " ")
			newUser := &appModel.User{
				Username:  msg.Chat.Username,
				CreatedAt: time.Now(),
			}
			if len(text) > 1 {
				id, err := util.DecodeReferralTelegramCode(text[1])
				if err != nil {
					log.Debugln("Failed to decode referral telegram code: ", err)
					if _, err := util.SendTextMessage(
						c.bt,
						uint64(chatId),
						"‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!"); err != nil {
						log.Error(err)
					}
					return
				}

				if chatId != id {
					newUser.RefererId = sql.NullInt64{
						Int64: id,
						Valid: true,
					}
				}
			}

			newUser, err := c.us.CreateUser(newUser)
			if err != nil {
				log.Error("Failed to create user: ", err)
				if _, err := util.SendTextMessage(c.bt, uint64(chatId), "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!"); err != nil {
					log.Error(err)
					return
				}
			}

			err = c.createTelegram(newUser, chatId, msg)
			if err != nil {
				err := c.us.DeleteById(uint64(newUser.Id.Int64))
				if err != nil {
					log.Error(err)
					return
				}
				return
			}
			return
		}
	}
}

func (c *StartCommand) createTelegram(user *appModel.User, chatId int64, msg *models.Message) error {
	if !user.Id.Valid {
		log.Error("userId invalid")
		if _, err := util.SendTextMessage(
			c.bt,
			uint64(chatId),
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É: /start"); err != nil {
			log.Error(err)
			return err
		}

		return errors.New("UserId invalid")
	}

	userid := user.Id.Int64
	if _, err := c.ts.CreateTelegram(uint64(userid), msg.Chat.Username, uint64(chatId)); err != nil {
		log.Error(err)
		if _, err := util.SendTextMessage(
			c.bt,
			uint64(chatId),
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É: /start"); err != nil {
			log.Error(err)
			return err
		}
		return err
	}

	return nil
}

func generateResponse() string {
	return `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NESTRAH ‚Äî –≤–∞—à—É –∑–∞—â–∏—Ç—É –æ—Ç —Ä–∏—Å–∫–æ–≤ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!</b>


üöÄ <b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>

		‚Ä¢ –°—Ç–µ–π–∫–∏–Ω–≥ —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é ‚Äî –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.

		‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–æ 30% –ø—Ä–∏ –æ–±–≤–∞–ª–µ –∫—É—Ä—Å–∞.

		‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ Telegram –∏ TON-–∫–æ—à–µ–ª–µ–∫.


üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>

		‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª —Å –ª—É—á—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.

		‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ TON Connect.

		‚Ä¢ –ó–∞—Å—Ç–µ–π–∫–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ —Å–ø–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ ‚Äî –º—ã –∑–∞—â–∏—Ç–∏–º –≤–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏!


üîí <b>–ü–æ—á–µ–º—É NESTRAH?</b>

		‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å ‚Äî –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã.

		‚Ä¢ –ì–∏–±–∫–æ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø—É–ª—ã –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.

		‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –≤ —Ç–æ–∫–µ–Ω–∞—Ö NESTRAH.

`
}
