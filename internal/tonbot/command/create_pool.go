package command

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"strconv"
	"time"
	appModels "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/tonbot/buttons"
	"tonclient/internal/tonbot/userstate"
	"tonclient/internal/util"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/xssnick/tonutils-go/address"
)

type CreatePoolCommandTypes interface {
	*models.Message | *models.CallbackQuery
}

var currentCreatingPool = make(map[int64]appModels.Pool)

type CreatePool[T CreatePoolCommandTypes] struct {
	b   *bot.Bot
	ps  *services.PoolService
	us  *services.UserService
	tcs *services.TonConnectService
	aws *services.AdminWalletService
	ws  *services.WalletTonService
}

func NewCreatePoolCommand[T CreatePoolCommandTypes](b *bot.Bot, ps *services.PoolService,
	us *services.UserService, tcs *services.TonConnectService, aws *services.AdminWalletService,
	ws *services.WalletTonService) *CreatePool[T] {
	return &CreatePool[T]{
		b:   b,
		ps:  ps,
		us:  us,
		tcs: tcs,
		aws: aws,
		ws:  ws,
	}
}

func (c *CreatePool[T]) Execute(ctx context.Context, args T) {

	if callback, ok := any(args).(*models.CallbackQuery); ok {
		c.executeCallback(ctx, callback)
		return
	}

	if message, ok := any(args).(*models.Message); ok {
		c.executeMessage(ctx, message)
		return
	}
}

func (c *CreatePool[T]) executeMessage(ctx context.Context, msg *models.Message) {
	chatId := msg.Chat.ID
	state, ok := userstate.CurrentState[chatId]
	if !ok || state == -1 {
		userstate.CurrentState[chatId] = userstate.EnterJettonMasterAddress
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø—É–ª\n\n1. –í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞</b> <b>(Jetton Master Address)</b>:\n",
		); err != nil {
			log.Error("Failed to send message: ", err)
			return
		}
		return
	}

	user, err := c.us.GetByTelegramChatId(uint64(chatId))
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"); err != nil {
			log.Error(err)
		}
		userstate.ResetState(chatId)
		return
	}
	w, err := c.ws.GetByUserId(uint64(user.Id.Int64))
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤–∞—à –∫–æ—à–µ–ª–µ–∫! –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π—Ç–µ: <b>–ü—Ä–æ—Ñ–∏–ª—å</b>",
		); err != nil {
			log.Error(err)
		}
		return
	}

	switch state {
	case userstate.EnterJettonMasterAddress:
		c.enterJettonMaster(msg, chatId, user)
		break
	case userstate.EnterCustomPeriodHold:
		c.enterCustomPeriodHold(msg)
		break
	case userstate.EnterProfitOnPercent:
		c.enterProfit(msg)
		break
	case userstate.EnterInsuranceCoating:
		c.enterInsuranceCoating(msg)
		break
	case userstate.EnterAmountTokens:
		c.enterAmountToken(msg, w)
		break
	default:
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!"); err != nil {
			log.Error(err)
		}
	}
}

func (c *CreatePool[T]) sendTransactionCreatingPool(pool *appModels.Pool, chatId int64, w *appModels.WalletTon) error {
	repeatBtn := util.CreateDefaultButton(buttons.RepeatCreatePoolId, buttons.Repeat)
	markup := util.CreateInlineMarup(1, repeatBtn)
	poolJson, err := json.Marshal(pool)
	if err != nil {
		if _, err := util.SendTextMessageMarkup(
			c.b,
			uint64(chatId),
			"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
			markup); err != nil {
			log.Error(err)
		}
	}

	walJetton, err := c.aws.TokenWalletAddress(pool.JettonMaster, address.MustParseAddr(w.Addr))
	adminWal := os.Getenv("WALLET_ADDR")
	payload := appModels.Payload{
		OperationType: appModels.OP_ADMIN_CREATE_POOL,
		JettonMaster:  pool.JettonMaster,
		Amount:        pool.Reserve,
		Payload:       string(poolJson),
	}

	s, err := c.tcs.LoadSession(fmt.Sprint(chatId))
	if err != nil {
		if err := util.RequestRepeatTonConnect(c.b, chatId, markup, c.tcs); err != nil {
			log.Error(err)
			return err
		}
		return err
	}

	boc, err := c.tcs.SendJettonTransaction(
		fmt.Sprint(chatId),
		walJetton.Address().String(),
		adminWal,
		w.Addr,
		fmt.Sprint(pool.Reserve),
		&payload,
		s,
	)
	if err != nil {
		log.Error(err)
		return err
	}

	log.Infoln(string(boc))

	currentCreatingPool[chatId] = appModels.Pool{}
	if _, err := util.SendTextMessage(
		c.b,
		uint64(chatId),
		"üîÅ –ü—É–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
	); err != nil {
		log.Error(err)
		return err
	}
	return nil
}

func (c *CreatePool[T]) enterAmountToken(msg *models.Message, w *appModels.WalletTon) {
	chatId := msg.Chat.ID
	text := msg.Text
	num, err := strconv.ParseFloat(text, 64)
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ù–∞–ø—Ä–∏–º–µ—Ä: 1",
		); err != nil {
			log.Error(err)
		}
		return
	}

	if num < 1 {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 1!",
		); err != nil {
			log.Error(err)
		}
		return
	}

	pool, ok := currentCreatingPool[chatId]
	if !ok {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é!"); err != nil {
			log.Error(err)
		}
		return
	}

	jettonWallet, err := c.aws.TokenWalletAddress(pool.JettonMaster, address.MustParseAddr(w.Addr))
	if err != nil {
		log.Error(err)
		return
	}
	pool.JettonWallet = jettonWallet.Address().String()
	pool.Reserve = num
	pool.IsCommissionPaid = false
	pool.CreatedAt = time.Now()
	pool.IsActive = false
	currentCreatingPool[chatId] = pool

	btns := util.GenerateButtonWallets(w, c.tcs)

	markup := util.CreateInlineMarup(1, btns...)
	if _, err := util.SendTextMessageMarkup(
		c.b,
		uint64(chatId),
		"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ!",
		markup,
	); err != nil {
		log.Error(err)
		return
	}

	if err := c.sendTransactionCreatingPool(&pool, chatId, w); err != nil {
		log.Error(err)
		return
	}
}

func (c *CreatePool[T]) enterInsuranceCoating(msg *models.Message) {
	chatId := msg.Chat.ID
	text := msg.Text
	num, err := strconv.Atoi(text)
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ —Ü–∏—Ñ—Ä–∞—Ö! –ù–∞–ø—Ä–∏–º–µ—Ä: 1",
		); err != nil {
			log.Error(err)
		}
		return
	}

	if num < 1 || num > 50 {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –°—Ç—Ä–∞—Ö–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 1 –∏ –Ω–µ –±–æ–ª—å—à–µ 50",
		); err != nil {
			log.Error(err)
		}
		return
	}

	pool, ok := currentCreatingPool[chatId]
	if !ok {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é!"); err != nil {
			log.Error(err)
		}
		return
	}

	resp := fmt.Sprintf("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ %v%% –∑–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ.\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞:", num)
	if _, err := util.SendTextMessage(
		c.b,
		uint64(chatId),
		resp,
	); err != nil {
		log.Error(err)
		return
	}

	pool.InsuranceCoating = uint(num)
	currentCreatingPool[chatId] = pool
	userstate.CurrentState[chatId] = userstate.EnterAmountTokens
}

func (c *CreatePool[T]) enterProfit(msg *models.Message) {
	chatId := msg.Chat.ID
	text := msg.Text
	num, err := strconv.Atoi(text)
	if err != nil {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: 1"); err != nil {
			log.Error(err)
		}
		return
	}

	if num < 1 || num > 3 {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 1 –∏ –±–æ–ª—å—à–µ —á–µ–º 3!",
		); err != nil {
			log.Error(err)
		}
		return
	}

	pool, ok := currentCreatingPool[chatId]
	if !ok {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é!"); err != nil {
			log.Error(err)
		}
		return
	}

	resp := fmt.Sprintf("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å <b>%v%%</b> —É–∫–∞–∑–∞–Ω–∞!\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö: \n–°—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.", num)
	if _, err := util.SendTextMessage(c.b, uint64(chatId), resp); err != nil {
		log.Error(err)
		return
	}
	pool.Reward = uint(num)
	currentCreatingPool[chatId] = pool
	userstate.CurrentState[chatId] = userstate.EnterInsuranceCoating
}

func (c *CreatePool[T]) enterCustomPeriodHold(msg *models.Message) {
	chatId := msg.Chat.ID
	text := msg.Text
	numPeriod, err := strconv.ParseInt(text, 10, 64)
	if err != nil {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ —Ö–æ–ª–¥–∞ –≤ —Ü–∏—Ñ—Ä–∞—Ö! –ù–∞–ø—Ä–∏–º–µ—Ä: 1"); err != nil {
			log.Error(err)
		}
		return
	}

	if numPeriod < 7 {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 7!",
		); err != nil {
			log.Error(err)
		}
		return
	}

	c.installPeriodPool(chatId, numPeriod)
}

func (c *CreatePool[T]) installPeriodPool(chatId, period int64) {
	pool, ok := currentCreatingPool[chatId]
	if !ok {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞!"); err != nil {
			log.Error(err)
		}
		return
	}

	pool.Period = uint(period)
	currentCreatingPool[chatId] = pool
	text := fmt.Sprintf(
		"‚úÖ –û—Ç–ª–∏—á–Ω–æ. –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>%v %v</b>.\n\n –£–∫–∞–∂–∏—Ç–µ <b>–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> (%% –≤ –¥–µ–Ω—å). –ù–∞–ø—Ä–∏–º–µ—Ä: 1.\n",
		period,
		util.SuffixDay(int(period)),
	)
	if _, err := util.SendTextMessage(
		c.b,
		uint64(chatId),
		text,
	); err != nil {
		log.Error(err)
		return
	}
	userstate.CurrentState[chatId] = userstate.EnterProfitOnPercent
}

func (c *CreatePool[T]) enterJettonMaster(msg *models.Message, chatId int64, user *appModels.User) {
	var newPool appModels.Pool
	jettonAddr := msg.Text
	if _, err := address.ParseAddr(jettonAddr); err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!",
		); err != nil {
			log.Error(err)
			userstate.ResetState(chatId)
			return
		}
		return
	}
	newPool.JettonMaster = jettonAddr
	newPool.OwnerId = uint64(user.Id.Int64)
	jettonData, err := c.aws.DataJetton(jettonAddr)
	if err != nil {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"); err != nil {
			log.Error(err)
			return
		}
		return
	}
	newPool.JettonName = jettonData.Name
	currentCreatingPool[chatId] = newPool

	text := fmt.Sprintf("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω <b>%v</b>.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö–æ–ª–¥–∞:", jettonData.Name)

	if _, err := util.SendTextMessageMarkup(
		c.b,
		uint64(chatId),
		text,
		c.generateSelectPeriodHoldMarkup()); err != nil {
		log.Error(err)
		userstate.ResetState(chatId)
	}
	userstate.CurrentState[chatId] = userstate.SelectPeriodHold
}

func (c *CreatePool[T]) executeCallback(ctx context.Context, callback *models.CallbackQuery) {
	if err := util.CheckTypeMessage(c.b, callback); err != nil {
		return
	}
	msg := callback.Message.Message
	chatId := msg.Chat.ID
	state, ok := userstate.CurrentState[chatId]
	if !ok || state == -1 {
		if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞!"); err != nil {
			log.Error(err)
		}
		return
	}

	if state == userstate.SelectPeriodHold {
		holdPeriod := c.getHoldPeriod(callback.Data, uint64(chatId))
		if holdPeriod == 0 {
			return
		}

		c.installPeriodPool(chatId, int64(holdPeriod))
	}

	if callback.Data == buttons.RepeatCreatePoolId {
		user, err := c.us.GetByTelegramChatId(uint64(chatId))
		if err != nil {
			log.Error(err)
			if _, err := util.SendTextMessage(
				c.b,
				uint64(chatId),
				"‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
			); err != nil {
				log.Error(err)
			}
			return
		}
		w, err := c.ws.GetByUserId(uint64(user.Id.Int64))
		if err != nil {
			log.Error(err)
			if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ"); err != nil {
				log.Error(err)
			}
			return
		}
		pool, ok := currentCreatingPool[chatId]
		if !ok {
			if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞!"); err != nil {
				log.Error(err)
			}
			return
		}

		if err := c.sendTransactionCreatingPool(&pool, chatId, w); err != nil {
			log.Error(err)
			if _, err := util.SendTextMessage(c.b, uint64(chatId), "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞!"); err != nil {
				log.Error(err)
			}
			return
		}
	}
}

func (c *CreatePool[T]) getHoldPeriod(data string, chatId uint64) int {
	switch data {
	case buttons.SevenDaysId:
		return 7
	case buttons.ThirtyDaysId:
		return 30
	case buttons.SixtyDaysId:
		return 60
	case buttons.EnterCustomPeriodId:
		if _, err := util.SendTextMessage(c.b, chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—Ä–æ–∫ —Ö–æ–ª–¥–∞ –≤ –¥–Ω—è—Ö: "); err != nil {
			log.Error(err)
			return 0
		}
		userstate.CurrentState[int64(chatId)] = userstate.EnterCustomPeriodHold
		break
	default:
		if _, err := util.SendTextMessage(c.b, chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–Ω–µ –∫–æ–º–∞–Ω–¥–∞!"); err != nil {
			log.Error(err)
		}
		break
	}

	return 0
}

func (c *CreatePool[T]) generateSelectPeriodHoldMarkup() *models.InlineKeyboardMarkup {
	seven := util.CreateDefaultButton(buttons.SevenDaysId, buttons.SevenDays)
	thirty := util.CreateDefaultButton(buttons.ThirtyDaysId, buttons.ThirtyDays)
	sixty := util.CreateDefaultButton(buttons.SixtyDaysId, buttons.SixtyDays)
	custom := util.CreateDefaultButton(buttons.EnterCustomPeriodId, buttons.EnterCustomPeriod)

	markup := util.CreateInlineMarup(1, seven, thirty, sixty, custom)
	return markup
}
