package command

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	appMoels "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/util"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

type OpenPoolInfoCommand struct {
	b  *bot.Bot
	ps *services.PoolService
	us *services.UserService
	ss *services.StakeService
}

func NewPoolInfo(b *bot.Bot, ps *services.PoolService, us *services.UserService,
	ss *services.StakeService) *OpenPoolInfoCommand {

	return &OpenPoolInfoCommand{
		b:  b,
		ps: ps,
		us: us,
		ss: ss,
	}
}

func (c *OpenPoolInfoCommand) Execute(ctx context.Context, callback *models.CallbackQuery) {
	if err := util.CheckTypeMessage(c.b, callback); err != nil {
		log.Error("[OpenPoolInfoCommand.Execute]", err)
		return
	}

	data := callback.Data
	msg := callback.Message.Message
	chatId := msg.Chat.ID

	splitData := strings.Split(data, ":")
	poolIdStr := splitData[1]

	poolId, err := strconv.ParseInt(poolIdStr, 10, 64)
	if err != nil {
		log.Error("[OpenPoolInfoCommand.Execute]", err)
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
		); err != nil {
			log.Error("[OpenPoolInfoCommand.Execute]", err)
		}
		return
	}

	pool, err := c.ps.GetId(uint64(poolId))
	if err != nil {
		log.Error("[OpenPoolInfoCommand.Execute]", err)
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–ª. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π",
		); err != nil {
			log.Error("[OpenPoolInfoCommand.Execute]", err)
		}
		return
	}

	poolInfo := c.info(pool)
	if err := util.EditTextMessage(
		ctx,
		c.b,
		uint64(chatId),
		msg.ID,
		poolInfo,
	); err != nil {
		log.Error("[OpenPoolInfoCommand.Execute]", err)
		return
	}

}

func (c *OpenPoolInfoCommand) info(p *appMoels.Pool) string {
	allStakesPool := c.ss.GetPoolStakes(uint64(p.Id.Int64))
	var sumAmount float64

	if allStakesPool != nil {
		for _, stake := range *allStakesPool {
			sumAmount += stake.Amount
		}
	}

	foramter := message.NewPrinter(language.English)
	ut := foramter.Sprintf("%.2f", sumAmount)
	reserve := foramter.Sprintf("%.2f", p.Reserve)

	i := `
<b> –û–ø–∏—Å–∞–Ω–∏–µ –ø—É–ª–∞: </b>

<b>üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: </b>
%v%% –≤ –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à –∑–∞—Å—Ç–µ–π–∫–∞–Ω—ã–π –±–∞–ª–∞–Ω—Å.

<b>‚è≥–°—Ä–æ–∫ —Ö–æ–ª–¥–∞:</b>
%v %v –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

<b>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞:</b>
–ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —É–ø–∞–¥—ë—Ç –±–æ–ª–µ–µ —á–µ–º –Ω–∞ %v%% –∑–∞ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ ‚Äî –≤–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è.

<b>üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è:</b>
–î–æ %v%% –æ—Ç –≤–∞—à–µ–π —Å—Ç–µ–π–∫–Ω—É—Ç–æ–π —Å—É–º–º—ã.

üîí –†–µ–∑–µ—Ä–≤ –ø—É–ª–∞:
 ‚Ä¢	–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: %v —Ç–æ–∫–µ–Ω–æ–≤
 ‚Ä¢	–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–µ–π–∫–æ–≤: %v —Ç–æ–∫–µ–Ω–æ–≤
`

	res := fmt.Sprintf(i, p.Reward, p.Period, c.suffixDay(int(p.Period)), p.InsuranceCoating, p.MaxCompensationPercent, ut, reserve)
	return res
}

func (c *OpenPoolInfoCommand) suffixDay(num int) string {
	a := "–¥–Ω–µ–π"
	b := "–¥–Ω—è"
	def := "–¥–µ–Ω—å"

	va := []int{2, 3, 4, 5, 11}
	vb := []int{6, 7, 8, 9, 10}

	for _, i := range va {
		if num%i == 0 {
			return a
		}
	}

	for _, i := range vb {
		if num%i == 0 {
			return b
		}
	}
	return def
}
