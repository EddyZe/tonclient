package command

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"strconv"
	"strings"
	appModels "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/util"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type TakeProfitFromStake struct {
	b   *bot.Bot
	us  *services.UserService
	ss  *services.StakeService
	ps  *services.PoolService
	ws  *services.WalletTonService
	aws *services.AdminWalletService
	ops *services.OperationService
	ts  *services.TelegramService
}

func NewTakeProfitFromStake(
	b *bot.Bot,
	us *services.UserService,
	ps *services.PoolService,
	ws *services.WalletTonService,
	aws *services.AdminWalletService,
	ss *services.StakeService,
	ops *services.OperationService,
	ts *services.TelegramService,
) *TakeProfitFromStake {
	return &TakeProfitFromStake{
		b:   b,
		us:  us,
		ps:  ps,
		ws:  ws,
		aws: aws,
		ss:  ss,
		ops: ops,
		ts:  ts,
	}
}

func (c *TakeProfitFromStake) Execute(ctx context.Context, callback *models.CallbackQuery) {
	if err := util.CheckTypeMessage(c.b, callback); err != nil {
		return
	}
	data := callback.Data
	chatId := callback.From.ID
	stakeId, err := c.getStakeIdFromCallbackData(data)
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!",
		); err != nil {
			log.Println(err)
		}
		return
	}
	stake, err := c.ss.GetById(stakeId)
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –°—Ç–µ–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω!",
		); err != nil {
			log.Println(err)
		}
		return
	}

	if stake.IsActive {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–µ–π–∫–∞!",
		); err != nil {
			log.Error(err)
		}
		return
	}

	if stake.IsRewardPaid || stake.IsInsurancePaid {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ù–∞–≥—Ä–∞–¥–∞ –∏–ª–∏ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã!",
		); err != nil {
			log.Error(err)
		}
		return
	}

	pool, err := c.ps.GetId(stake.PoolId)
	if err != nil {
		log.Error("get pool err: ", err.Error())
		return
	}

	jettonMaster := pool.JettonMaster
	u, err := c.us.GetByTelegramChatId(uint64(chatId))
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!",
		); err != nil {
			log.Println(err)
		}
		return
	}

	w, err := c.ws.GetByUserId(uint64(u.Id.Int64))
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫!",
		); err != nil {
			log.Println(err)
		}
		return
	}

	jettonaData, err := c.aws.DataJetton(jettonMaster)
	if err != nil {
		log.Error("get jettona err: ", err.Error())
		return
	}

	if stake.Balance > pool.Reserve {
		util.SendMessageOwnerAndUserIfBadReserve(
			uint64(chatId),
			pool.OwnerId,
			uint64(pool.Id.Int64),
			jettonaData.Name,
			c.b,
			c.ts,
		)
		stake.IsRewardPaid = false
		if err := c.ss.Update(stake); err != nil {
			log.Error(err)
			return
		}
		return
	}

	boc, err := c.aws.SendJetton(jettonMaster, w.Addr, "", util.RemoveZeroFloat(stake.Balance), jettonaData.Decimals)
	if err != nil {
		if _, err := util.SendTextMessage(
			c.b,
			uint64(chatId),
			"‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!",
		); err != nil {
			log.Println(err)
		}
		return
	}

	stake.IsRewardPaid = true
	if err := c.ss.Update(stake); err != nil {
		log.Error(err)
		return
	}

	pool.Reserve -= stake.Balance - stake.Amount
	stakes := c.ss.GetPoolStakes(stake.PoolId)
	pool.TempReserve = pool.Reserve - util.CalculateSumStakesFromPool(&stakes, pool)
	if err := c.ps.Update(pool); err != nil {
		log.Error("update pool err: ", err.Error())
		return
	}

	hash := base64.StdEncoding.EncodeToString(boc)

	if _, err := util.SendTextMessage(
		c.b,
		uint64(chatId),
		"üí∏ –¢–æ–∫–µ–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. Hash: "+hash,
	); err != nil {
		log.Println(err)
	}

	if _, err := c.ops.Create(
		uint64(u.Id.Int64),
		appModels.OP_CLAIM,
		fmt.Sprintf("–°–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–æ–≤. %f %v. Hash: %v", stake.Balance, jettonaData.Name, hash),
	); err != nil {
		log.Error("create op err: ", err.Error())
	}
}

func (c *TakeProfitFromStake) getStakeIdFromCallbackData(data string) (uint64, error) {
	splitdata := strings.Split(data, ":")
	if len(splitdata) != 2 {
		return 0, errors.New("invalid data")
	}

	id, err := strconv.ParseUint(splitdata[1], 10, 64)
	if err != nil {
		return 0, errors.New("invalid id")
	}

	return id, nil
}
