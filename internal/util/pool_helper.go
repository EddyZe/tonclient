package util

import (
	"fmt"
	appModels "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/tonbot/buttons"

	"github.com/go-telegram/bot/models"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

func generateNamePool(pool *appModels.Pool, aws *services.AdminWalletService) string {
	jettonData, err := aws.DataJetton(pool.JettonMaster)
	if err != nil {
		return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
	}
	return fmt.Sprintf("%v (%d %v / %d%% / —Ä–µ–∑–µ—Ä–≤ %v)", jettonData.Name, pool.Period, SuffixDay(int(pool.Period)), pool.Reward, pool.Reserve)
}

func GeneratePoolButtons(pool *[]appModels.Pool, aws *services.AdminWalletService) []models.InlineKeyboardButton {
	res := make([]models.InlineKeyboardButton, 0, len(*pool))
	for _, p := range *pool {
		if !p.Id.Valid {
			continue
		}
		poolId := p.Id.Int64
		res = append(
			res,
			CreateDefaultButton(
				fmt.Sprintf("%v:%d", buttons.PoolDataButton, poolId),
				generateNamePool(&p, aws),
			),
		)
	}
	return res
}

func PoolInfo(p *appModels.Pool, ss *services.StakeService) string {
	allStakesPool := ss.GetPoolStakes(uint64(p.Id.Int64))
	var sumAmount float64

	if allStakesPool != nil {
		for _, stake := range *allStakesPool {
			sumAmount += stake.Amount
		}
	}

	foramter := message.NewPrinter(language.English)
	ut := foramter.Sprintf("%.2f", sumAmount)
	reserve := foramter.Sprintf("%.2f", p.Reserve)

	i := `
<b> –û–ø–∏—Å–∞–Ω–∏–µ –ø—É–ª–∞: </b>

<b>üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: </b>
%v%% –≤ –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à –∑–∞—Å—Ç–µ–π–∫–∞–Ω—ã–π –±–∞–ª–∞–Ω—Å.

<b>‚è≥–°—Ä–æ–∫ —Ö–æ–ª–¥–∞:</b>
%v %v –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

<b>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞:</b>
–ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —É–ø–∞–¥—ë—Ç –±–æ–ª–µ–µ —á–µ–º –Ω–∞ %v%% –∑–∞ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ ‚Äî –≤–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è.

<b>üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è:</b>
–î–æ 30%% –æ—Ç –≤–∞—à–µ–π —Å—Ç–µ–π–∫–Ω—É—Ç–æ–π —Å—É–º–º—ã.

üîí –†–µ–∑–µ—Ä–≤ –ø—É–ª–∞:
 ‚Ä¢	–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: %v —Ç–æ–∫–µ–Ω–æ–≤
 ‚Ä¢	–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–µ–π–∫–æ–≤: %v —Ç–æ–∫–µ–Ω–æ–≤
`

	res := fmt.Sprintf(i, p.Reward, p.Period, SuffixDay(int(p.Period)), p.InsuranceCoating, ut, reserve)
	return res
}

func GenerateOwnerPoolInlineKeyboard(poolId int64) *models.InlineKeyboardMarkup {
	paidCommision := CreateDefaultButton(fmt.Sprintf("%v:%v", buttons.PaidCommissionId, poolId), buttons.PaidCommission)
	addReserve := CreateDefaultButton(fmt.Sprintf("%v:%v", buttons.AddReserveId, poolId), buttons.AddReserve)
	closePool := CreateDefaultButton(fmt.Sprintf("%v:%v", buttons.ClosePoolId, poolId), buttons.ClosePool)
	btnClose := CreateDefaultButton(buttons.DefCloseId, buttons.DefCloseText)

	return CreateInlineMarup(1, paidCommision, addReserve, closePool, btnClose)
}
