package util

import (
	"fmt"
	"math"
	"strconv"
	"tonclient/internal/dyor"
	appModels "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/tonbot/buttons"
	"tonclient/internal/tonfi"

	"github.com/go-telegram/bot/models"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

func generateNamePool(pool *appModels.Pool, aws *services.AdminWalletService, subSum float64) string {
	jettonData, err := aws.DataJetton(pool.JettonMaster)
	currentReserve := pool.Reserve - subSum
	if currentReserve < 0 {
		currentReserve = 0
	}
	if err != nil {
		return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
	}
	return fmt.Sprintf(
		"%v (%d %v / %v%% / —Ä–µ–∑–µ—Ä–≤ %v)",
		jettonData.Name,
		pool.Period,
		SuffixDay(int(pool.Period)),
		pool.Reward,
		RemoveZeroFloat(currentReserve),
	)
}

func GeneratePoolButtons(pool *[]appModels.Pool, aws *services.AdminWalletService, suf string, ss *services.StakeService) []models.InlineKeyboardButton {
	res := make([]models.InlineKeyboardButton, 0, len(*pool))
	for _, p := range *pool {
		if !p.Id.Valid {
			continue
		}
		poolId := p.Id.Int64
		subSubStake := 0.
		stakes := ss.GetPoolStakes(uint64(poolId))
		subSubStake = CalculateSumStakesFromPool(stakes, &p)
		res = append(
			res,
			CreateDefaultButton(
				fmt.Sprintf("%v:%d:%v", buttons.PoolDataButton, poolId, suf),
				generateNamePool(&p, aws, subSubStake),
			),
		)
	}
	return res
}

func PoolInfo(p *appModels.Pool, ss *services.StakeService, jettonData *appModels.JettonData) string {
	allStakesPool := ss.GetPoolStakes(uint64(p.Id.Int64))
	var sumAmount float64
	subReserve := 0.

	if allStakesPool != nil {
		for _, stake := range *allStakesPool {
			if stake.IsActive {
				sumAmount += stake.Amount
			}
		}
		subReserve = CalculateSumStakesFromPool(allStakesPool, p)
	}

	tenProcientReserve := (p.Reserve - subReserve) * 0.1
	if tenProcientReserve < 0 {
		tenProcientReserve = 0
	}

	currentReserve := p.Reserve - subReserve
	if currentReserve < 0 {
		currentReserve = 0
	}

	foramter := message.NewPrinter(language.English)
	ut := foramter.Sprintf("%v", RemoveZeroFloat(sumAmount))
	reserve := foramter.Sprintf("%v", RemoveZeroFloat(tenProcientReserve))
	fullReserve := foramter.Sprintf("%v", RemoveZeroFloat(currentReserve))

	var status string
	if p.IsActive {
		status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
	} else {
		status = "‚è≥ –ü—É–ª –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
	}

	jettonInfo, err := tonfi.GetAssetByAddr(p.JettonMaster)
	if err != nil {
		log.Error(err)
		return "-"
	}
	price := 0.
	price, err = strconv.ParseFloat(jettonInfo.DexPriceUsd, 64)
	if err != nil {
		log.Error(err)
		price = 0
	}
	if price == 0 {
		resp, err := dyor.GetPrices(p.JettonMaster)
		if err != nil {
			price = 0.
		} else {
			price, err = strconv.ParseFloat(resp.Currency.Price.Value, 64)
			if err != nil {
				log.Infoln(err.Error())
				price = 0.
			}

			price = price / math.Pow10(resp.Currency.Price.Decimals)
			log.Infoln(price)
		}
	}

	reliability := (p.Reserve / (jettonData.TotalSupply / (10e+8))) / 0.72 * 100
	reliability = math.Min(reliability, 100)

	var emoj string
	var level string

	if reliability < 5 {
		emoj = "üü•"
		level = "–Ω–∏–∑–∫–∏–π"
	} else if reliability < 20 {
		emoj = "üü®"
		level = "—Å—Ä–µ–¥–Ω–∏–π"
	} else {
		emoj = "üü©"
		level = "–≤—ã—Å–æ–∫–∏–π"
	}

	res := fmt.Sprintf(
		`
<b> üì¶ –û–ø–∏—Å–∞–Ω–∏–µ –ø—É–ª–∞ %v: </b>

<b>–°—Ç–∞—Ç—É—Å</b>: %v
<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞:</b> %v$

<b>üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: </b>
%v%% –≤ –¥–µ–Ω—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –∑–∞—Å—Ç–µ–π–∫–∞–Ω—É—é —Å—É–º–º—É.

<b>‚è≥–°—Ä–æ–∫ —Ö–æ–ª–¥–∞:</b>
%v %v —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–Ω–æ —Ç–æ–≥–¥–∞ –±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥).

<b>üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–π–∫–∞ </b>
%v %v

<b>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞:</b>
–ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –±–æ–ª–µ–µ —á–µ–º –Ω–∞ %v%% –∫ –º–æ–º–µ–Ω—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞, –≤–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è

<b>üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è:</b>
–î–æ 50%% –æ—Ç –≤–∞—à–µ–π —Å—Ç–µ–π–∫–Ω—É—Ç–æ–π —Å—É–º–º—ã.

üîí –†–µ–∑–µ—Ä–≤ –ø—É–ª–∞:
 ‚Ä¢	–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: %v —Ç–æ–∫–µ–Ω–æ–≤
 ‚Ä¢	–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–µ–π–∫–æ–≤: %v —Ç–æ–∫–µ–Ω–æ–≤
 ‚Ä¢  –û–±—â–∏–π —Ä–µ–∑–µ—Ä–≤: %v

üîê <b>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—É–ª–∞</b>: %v %v%% –∏–∑ 100%%
–£—Ä–æ–≤–µ–Ω—å: %v, —Ä–µ–∑–µ—Ä–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %v –∏–∑ %v —Ç–æ–∫–µ–Ω–æ–≤`,
		jettonInfo.DisplayName,
		status,
		RemoveZeroFloat(price),
		RemoveZeroFloat(p.Reward),
		p.Period,
		SuffixDay(int(p.Period)),
		RemoveZeroFloat(p.MinStakeAmount),
		p.JettonName,
		p.InsuranceCoating,
		ut,
		reserve,
		fullReserve,
		emoj,
		RemoveZeroFloat(reliability),
		level,
		RemoveZeroFloat(currentReserve),
		RemoveZeroFloat(jettonData.TotalSupply/(10e+8)),
	)
	return res
}

func GenerateOwnerPoolInlineKeyboard(poolId int64, backPoolListButtonId string, isActive, commissionPaid bool, sufData string) *models.InlineKeyboardMarkup {
	paidCommision := CreateDefaultButton(fmt.Sprintf("%v:%v", buttons.PaidCommissionId, poolId), buttons.PaidCommission)
	addReserve := CreateDefaultButton(fmt.Sprintf("%v:%v:%v", buttons.AddReserveId, poolId, sufData), buttons.AddReserve)
	var closePoolText string
	if isActive {
		closePoolText = buttons.ClosePool
	} else {
		closePoolText = buttons.OpePool
	}
	takeTokens := CreateDefaultButton(fmt.Sprintf("%v:%v:%v", buttons.TakeTokensId, poolId, sufData), buttons.TakeTokens)
	closePool := CreateDefaultButton(fmt.Sprintf("%v:%v:%v", buttons.ClosePoolId, poolId, sufData), closePoolText)
	backListPools := CreateDefaultButton(backPoolListButtonId, buttons.BackPoolList)
	deletePool := CreateDefaultButton(fmt.Sprintf("%v:%v", buttons.DeletePoolId, poolId), buttons.DeletePool)
	btns := make([]models.InlineKeyboardButton, 0, 5)
	if !commissionPaid {
		btns = append(btns, paidCommision)
	}

	btns = append(btns, addReserve)
	btns = append(btns, closePool)
	btns = append(btns, takeTokens)
	btns = append(btns, deletePool)
	btns = append(btns, backListPools)

	return CreateInlineMarup(1, btns...)
}
