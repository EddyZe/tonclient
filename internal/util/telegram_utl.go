package util

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"
	"tonclient/internal/config"
	appModel "tonclient/internal/models"
	"tonclient/internal/services"
	"tonclient/internal/tonbot/buttons"
	"tonclient/internal/tonbot/callbacksuf"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var log = config.InitLogger()

func SendTextMessage(bt *bot.Bot, chatId uint64, text string) (*models.Message, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	message, err := bt.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    chatId,
		Text:      text,
		ParseMode: "HTML",
	})
	if err != nil {
		log.Error("Failed to send message: ", err)
		return nil, err
	}

	return message, nil
}

func SendTextMessageMarkup(bt *bot.Bot, chatId uint64, text string, markup models.ReplyMarkup) (*models.Message, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	message, err := bt.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatId,
		Text:        text,
		ParseMode:   "HTML",
		ReplyMarkup: markup,
	})

	if err != nil {
		log.Error("Failed to send message: ", err)
		return nil, err
	}
	return message, nil
}

func CheckTypeMessage(b *bot.Bot, callback *models.CallbackQuery) error {
	msgType := callback.Message.Type
	if msgType == models.MaybeInaccessibleMessageTypeInaccessibleMessage {
		if _, err := SendTextMessage(
			b,
			uint64(callback.From.ID),
			"‚ùå –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω–æ –º–Ω–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ!"); err != nil {
			log.Error(err)
		}
		return errors.New("message type inaccessible")
	}

	return nil
}

func DeleteMessage(ctx context.Context, b *bot.Bot, chatId uint64, messageId int) error {
	if _, err := b.DeleteMessage(ctx, &bot.DeleteMessageParams{
		ChatID:    chatId,
		MessageID: messageId,
	}); err != nil {
		log.Error("Failed delete message", err)
		return err
	}

	return nil
}

func EditMessageMarkup(ctx context.Context, b *bot.Bot, chatId uint64, messageId int, markup models.ReplyMarkup) error {
	if _, err := b.EditMessageReplyMarkup(
		ctx,
		&bot.EditMessageReplyMarkupParams{
			ChatID:      chatId,
			MessageID:   messageId,
			ReplyMarkup: markup,
		}); err != nil {
		log.Error("Failed edit message", err)
		return err
	}

	return nil
}

func EditTextMessage(ctx context.Context, b *bot.Bot, chatId uint64, messageId int, message string) error {
	if _, err := b.EditMessageText(
		ctx,
		&bot.EditMessageTextParams{
			Text:      message,
			ChatID:    chatId,
			MessageID: messageId,
			ParseMode: "HTML",
		},
	); err != nil {
		log.Error("Failed edit message", err)
		return err
	}
	return nil
}

func EditTextMessageMarkup(ctx context.Context, b *bot.Bot, chatId uint64, messageId int, message string, markup models.ReplyMarkup) error {
	if _, err := b.EditMessageText(
		ctx,
		&bot.EditMessageTextParams{
			Text:        message,
			ChatID:      chatId,
			MessageID:   messageId,
			ParseMode:   "HTML",
			ReplyMarkup: markup,
		},
	); err != nil {
		log.Error("Failed edit message", err)
		return err
	}
	return nil
}

func ConnectingTonConnect(b *bot.Bot, chatId uint64, tcs *services.TonConnectService) (*appModel.TonConnectResult, error) {
	sessionTonConnect, err := tcs.CreateSession()
	if err != nil {
		log.Error(err)
		if _, err := SendTextMessage(b, chatId, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!"); err != nil {
			log.Error(err)
		}
		return nil, err
	}

	urls, err := tcs.GenerateConnectUrls(sessionTonConnect)
	if err != nil {
		log.Error(err)
		if _, err := SendTextMessage(b, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫, –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"); err != nil {
			log.Error(err)
		}
		return nil, err
	}

	btns := make([]models.InlineKeyboardButton, 0, 2)
	for k, v := range urls {
		btn2 := CreateUrlInlineButton(
			fmt.Sprintf("%v: %v", buttons.OpenWallet, k),
			v,
		)
		btns = append(btns, btn2)
	}

	markup := MenuWithBackButton(buttons.DefCloseId, buttons.DefCloseText, btns...)
	if _, err := SendTextMessageMarkup(b, chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å: ", markup); err != nil {
		log.Error(err)
		return nil, err
	}

	res, err := tcs.Connect(sessionTonConnect)
	if err != nil {
		log.Error(err)
		if _, err := SendTextMessage(b, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"); err != nil {
			log.Error(err)
		}
		return nil, err
	}
	err = tcs.SaveSession(fmt.Sprint(chatId), sessionTonConnect)
	if err != nil {
		log.Error(err)
		if _, err := SendTextMessage(b, chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!"); err != nil {
			log.Error(err)
		}
		return nil, err
	}

	return res, nil
}

func RequestRepeatTonConnect(b *bot.Bot, chatId int64, markup *models.InlineKeyboardMarkup, tcs *services.TonConnectService) error {
	if _, err := SendTextMessageMarkup(
		b,
		uint64(chatId),
		"‚ùå –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ TonConnect! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞! –ê –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</b>",
		markup,
	); err != nil {
		log.Error(err)
		return err
	}
	if _, err := ConnectingTonConnect(b, uint64(chatId), tcs); err != nil {
		log.Error(err)
		return err
	}
	if _, err := SendTextMessageMarkup(
		b,
		uint64(chatId),
		"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω. –ù–∞–∂–º–∏—Ç–µ '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É' –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Ä–µ–∑–µ—Ä–≤—É –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ",
		markup); err != nil {
		log.Error(err)
		return err
	}
	return nil
}

func SendMessageOwnerAndUserIfBadReserve(
	chatId, ownerPoolId, poolId uint64,
	jettonName string,
	b *bot.Bot,
	ts *services.TelegramService,
) {
	if _, err := SendTextMessage(
		b,
		chatId,
		"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞ –ø—É–ª–∞. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—É–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
	); err != nil {
		log.Println(err)
	}
	ownerPoolTelegram, er := ts.GetByUserId(ownerPoolId)
	if er != nil {
		return
	}
	idButton := fmt.Sprintf("%v:%v:%v", buttons.PoolDataButton, poolId, callbacksuf.My)
	btn := CreateDefaultButton(idButton, "–û—Ç–∫—Ä—ã—Ç—å –ø—É–ª")
	markup := CreateInlineMarup(1, btn)
	textMessage := fmt.Sprintf("–í –≤–∞—à–µ–º –ø—É–ª–µ —Å —Ç–æ–∫–µ–Ω–æ–º %v –∫–æ–Ω—á–∞–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ!", jettonName)
	if _, err := SendTextMessageMarkup(
		b,
		ownerPoolTelegram.TelegramId,
		textMessage,
		markup,
	); err != nil {
		log.Println(err)
	}
}

func GetJettonNameFromCallbackData(b *bot.Bot, chatId uint64, data string) (string, error) {
	splitDat := strings.Split(data, ":")

	if len(splitDat) != 2 {
		if _, err := SendTextMessage(
			b,
			chatId,
			"‚ùå –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É!",
		); err != nil {
			log.Error(err)
		}
		return "", errors.New("invalid callback data")
	}

	return splitDat[1], nil
}

func GetCurrentPage(chatId int64, pages map[int64]int) int {
	page, ok := pages[chatId]
	if !ok {
		page = 0
	}
	pages[chatId] = page
	return page
}

func GenerateGroupButtons(groups *[]appModel.GroupElements, idButton string) []models.InlineKeyboardButton {
	res := make([]models.InlineKeyboardButton, 0, 5)
	for _, g := range *groups {
		idButton := fmt.Sprintf("%v:%v", idButton, g.Name)
		text := fmt.Sprintf("%v. –°—Ç–µ–π–∫–æ–≤: %v", g.Name, g.Count)
		btn := CreateDefaultButton(idButton, text)
		res = append(res, btn)
	}

	return res
}

func GenerateStakeListByGroup(stakes []appModel.Stake, jettonName, idButton string) []models.InlineKeyboardButton {
	res := make([]models.InlineKeyboardButton, 0, 5)
	for _, s := range stakes {
		idbtn := fmt.Sprintf("%v:%v:%v", idButton, jettonName, s.Id.Int64)
		text := fmt.Sprintf("–°—Ç–µ–π–∫ –æ—Ç %v", s.StartDate.Format("02.01.2006 15:04"))
		if !s.IsActive && s.IsRewardPaid || !s.IsActive && s.IsInsurancePaid {
			text += " ‚ö™Ô∏è"
		} else if !s.IsActive && !s.IsRewardPaid || !s.IsInsurancePaid && !s.IsActive {
			text += " üü°"
		} else {
			text += " üü¢"
		}
		btn := CreateDefaultButton(idbtn, text)
		res = append(res, btn)
	}

	return res
}

func SendAgreement(b *bot.Bot, chatId uint64) {
	message := `
üìú<b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>

–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:
‚Ä¢ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –∏ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å–±–æ—è–º–∏, –æ—à–∏–±–∫–∞–º–∏ –≤ –∫–æ–¥–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.
‚Ä¢ –ù–∏–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π, –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ–º.
–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤–∫–ª—é—á–∞—è —Å—Ç–µ–π–∫–∏–Ω–≥, –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ ‚Äî —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (¬´as is¬ª) –∏ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Ä–≤–∏—Å–∞.
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –∞—É–¥–∏—Ç, –æ—Ç–±–æ—Ä, –æ—Ü–µ–Ω–∫—É –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—ã–±–æ—Ä –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ª–µ–∂–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—á–∞—Å—Ç–∏–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–í —Ç–æ–º —á–∏—Å–ª–µ, —Ä–∏—Å–∫–∏ –ø–æ–ª–Ω–æ–π –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
‚Ä¢ –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–±–ª–∞–¥–∞–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ —Ä–∏—Å–∫–æ–≤.
‚úÖ –ù–∞–∂–∏–º–∞—è ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π.
`
	btn := CreateDefaultButton(buttons.AcceptUserAgreementId, buttons.AcceptUserAgreement)
	markup := CreateInlineMarup(1, btn)
	if _, err := SendTextMessageMarkup(b, chatId, message, markup); err != nil {
		log.Error(err)
	}
}
